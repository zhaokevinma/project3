{"version":3,"sources":["components/Nav/index.js","utils/API.js","components/Grid/index.js","components/InputForm/index.js","components/Worklist/index.js","components/Folder/index.js","pages/Worklist.js","components/Jumbotron/index.js","pages/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","getPatients","axios","get","getPatient","id","createPatient","newPatient","post","getFolders","getFolder","createFolder","newFolder","Container","fluid","children","Row","Col","size","split","map","join","InputForm","props","type","name","placeholder","value","searchTerm","onChange","handleOnChange","Worklist","patients_filtered","length","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","newPatientFirst","handleNewPatientFirst","newPatientLast","handleNewPatientLast","block","onClick","handleSave","patient","key","_id","lastName","firstName","Folder","handleNewFolder","handleCreateFolder","folders","folder","folderFilter","folderName","patients","state","temp","modalShow","setModalShow","event","setState","target","preventDefault","API","then","grabPatients","catch","err","console","log","filtered","filter","toLowerCase","indexOf","grabFolders","response","folder_id","folderPatients","further_filter","this","res","data","push","Component","Jumbotron","NoMatch","role","aria-label","App","exact","path","component","WorklistPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be282036.chunk.js","sourcesContent":["// ------ Dependencies ------\nimport React from \"react\";\nimport \"./style.css\";\n\n// ------ Nav ------\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Home\n      </a>\n    </nav>\n  );\n}\n\n// ------ Export ------\nexport default Nav;\n","// ------ Dependencies\nimport axios from \"axios\"\n\n// ------ GET requests\nexport default {\n    getPatients: function() {\n        return axios.get(\"/api/patients\");\n    },\n    getPatient: function(id) {\n        return axios.get(\"/api/patients/\" + id);\n    },\n    createPatient: function(newPatient) {\n        return axios.post(\"/api/patients\", newPatient);\n    },\n    getFolders: function() {\n        return axios.get(\"api/folders\");\n    },\n    getFolder: function(id) {\n        return axios.get(\"/api/folders/\" + id);\n    },\n    createFolder: function(newFolder) {\n        return axios.post(\"/api/folders\", newFolder);\n    }\n}","// ------ Dependencies ------\nimport React from \"react\";\n\n\n// ------ Exporting the Container, Row, and Col ------\n// Bootstrap container\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// Boostrap row\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// Bootstrap column\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","// ------ Dependencies\nimport React from \"react\";\nimport \"./style.css\";\n\n// ------ Input form\nconst InputForm = props => {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <input \n                    className=\"col-5 form-control\"\n                    type=\"text\"\n                    name=\"searchTerm\"\n                    placeholder=\"Search Patient Name...\"\n                    value={props.searchTerm}\n                    onChange={props.handleOnChange}\n                />\n            </div>\n        </form>\n    )\n}\n\n// ------ Export\nexport default InputForm","// ------ Dependencies\nimport React from \"react\";\nimport { Row, Col } from \"../Grid\";\nimport { Accordion, Card, Button } from 'react-bootstrap'\nimport InputFormComponent from \"../InputForm\";\nimport \"./style.css\";\n\n// ------ Worklist Component\nconst Worklist = props => {\n    return (props.patients_filtered.length === 0) ? (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"worklist\">\n                    <h4>Worklist</h4>\n                    <InputFormComponent handleOnChange={props.handleOnChange}/>\n                    <Accordion defaultActiveKey=\"0\">\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                                    <Row>\n                                        <Col size=\"3\">\n                                            <i className=\"fas fa-user-plus fa-2x\"></i>\n                                        </Col>\n                                        <Col size=\"6\">\n                                            <h4>Create patient</h4>\n                                        </Col>\n                                    </Row>\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    <input \n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"newPatientF\"\n                                        placeholder=\"First Name...\"\n                                        value={props.newPatientFirst}\n                                        onChange={props.handleNewPatientFirst}\n                                    />\n                                    <input \n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"newPatientL\"\n                                        placeholder=\"Last Name...\"\n                                        value={props.newPatientLast}\n                                        onChange={props.handleNewPatientLast}\n                                    />\n                                    <Button block\n                                        className=\"createPatient\"\n                                        type=\"submit\"\n                                        onClick={props.handleSave}\n                                    >\n                                    <i className=\"fas fa-check-circle\"></i>\n                                    </Button>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                </div>\n            </div>\n        </div>\n    ) : (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"worklist\">\n                    <h4>Worklist</h4>\n                    <InputFormComponent handleOnChange={props.handleOnChange}/>\n\n                    <Accordion defaultActiveKey=\"0\">\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                                    <Row>\n                                        <Col size=\"3\">\n                                            <i className=\"fas fa-user-plus fa-2x\"></i>\n                                        </Col>\n                                        <Col size=\"6\">\n                                            <h4>Create patient</h4>\n                                        </Col>\n                                    </Row>\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    <input \n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"newPatientF\"\n                                        placeholder=\"First Name...\"\n                                        value={props.newPatientFirst}\n                                        onChange={props.handleNewPatientFirst}\n                                    />\n                                    <input \n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"newPatientL\"\n                                        placeholder=\"Last Name...\"\n                                        value={props.newPatientLast}\n                                        onChange={props.handleNewPatientLast}\n                                    />\n                                    <Button block\n                                        className=\"createPatient\"\n                                        type=\"submit\"\n                                        onClick={props.handleSave}\n                                    >\n                                    <i className=\"fas fa-check-circle\"></i>\n                                    </Button>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                    {props.patients_filtered.map(patient => {\n                        return (\n                            <li className=\"list-group-item\" key={patient._id}>\n                                <Row id={patient._id + \"Card\"}>\n                                    <Col size=\"5\">\n                                        <h5>{patient.lastName}, {patient.firstName}</h5>\n                                    </Col>\n                                    <Col size=\"2\">\n                                        <h5><i className=\"fas fa-file-medical\"></i></h5>\n                                    </Col>\n                                </Row>\n                            </li>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// ------ Export\nexport default Worklist","// ------ Dependencies\nimport React from \"react\";\nimport { Accordion, Card, Button } from 'react-bootstrap'\nimport { Row, Col} from \"../Grid\";\nimport \"./style.css\";\n\n// ------ Folder\nconst Folder = props => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"folder\">\n                    <h4>Folders</h4>\n                    <Accordion defaultActiveKey=\"0\">\n                        <Card>\n                            <Card.Header>\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                                <Row>\n                                    <Col size=\"3\">\n                                        <i className=\"fas fa-folder-plus fa-2x\"></i>\n                                    </Col>\n                                    <Col size=\"6\">\n                                        <h4>Create folder</h4>\n                                    </Col>\n                                </Row>\n                            </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                <input \n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    name=\"newFolder\"\n                                    placeholder=\"Folder Name...\"\n                                    value={props.newFolder}\n                                    onChange={props.handleNewFolder}\n                                />\n                                <Button block\n                                    className=\"createFolder\"\n                                    type=\"submit\"\n                                    onClick={props.handleCreateFolder}\n                                >\n                                    <i className=\"fas fa-check-circle\"></i>\n                                </Button>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                    {props.folders.map(folder => {\n                        return (\n                            <li className=\"list-group-item\" key={folder._id}>\n                                <Row>\n                                    <Col size=\"10\">\n                                        <h5 id={folder._id} onClick={props.folderFilter}>{folder.folderName}</h5>\n                                    </Col> \n                                    <Col size=\"2\">\n                                        <h5>{folder.patients.length}</h5>\n                                    </Col>\n                                </Row>\n                            </li>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// ------ Export\nexport default Folder;\n","// ------ Dependencies\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Row, Col, Container } from \"../components/Grid\";\n// import { ButtonToolbar, Button } from 'react-bootstrap';\nimport WorklistComponent from \"../components/Worklist\";\nimport FolderComponent from \"../components/Folder\";\n// import PatientModel from \"../components/PatientModel\";\n\n// ------ Main\nclass Worklist extends Component {\n    // ------ State contains an array of patient in db\n    state = {\n        temp: [],\n        patients: [],\n        patients_filtered: [],\n        folders:[],\n        searchTerm: \"\",\n        newFolder: \"\",\n        newPatientFirst: \"\",\n        newPatientLast: \"\",\n        modalShow: false,\n        setModalShow: false\n    };\n\n    // ------ Handles modal new patient create input\n    handleNewPatientFirst = event => {\n        this.setState({ newPatientFirst: event.target.value });\n    }\n\n    handleNewPatientLast = event => {\n        this.setState({ newPatientLast: event.target.value });\n    }\n\n    // ------ Handles new patient modal save button\n    handleSave = event => {\n        event.preventDefault();\n        \n        let newPatient = {\n            lastName: this.state.newPatientLast,\n            firstName: this.state.newPatientFirst\n        };\n\n        API.createPatient(newPatient)\n            .then(this.grabPatients())\n            .catch(err => console.log(err));\n    }\n\n    // ------ Render patients from db to state as soon as page loads\n    componentDidMount() {\n        // ------ Retrieve data and set state\n        this.grabPatients();\n        this.grabFolders();\n    }\n\n    // ------ grabPatients\n    grabPatients() {\n        API.getPatients()\n            .then(res => this.setState({ \n                patients: res.data,\n                patients_filtered: res.data\n            }))\n            .catch(err => console.log(err));\n    }\n\n    // ------ grab patient by id\n    grab1Patient(id) {\n        API.getPatient(id)\n            .then(res => this.state.temp.push(res.data))\n            .catch(err => console.log(err));\n    }\n\n    // ------ grabFolders\n    grabFolders() {\n        API.getFolders()\n            .then(res => this.setState({\n                folders: res.data\n            }))\n            .catch(err => console.log(err));\n    }\n\n    // ------ Handles user input for Searching Patient Name\n    handleOnChange = event => {\n        // ------ Set search \n        let searchTerm = event.target.value;\n        console.log(searchTerm);\n        this.setState( { searchTerm });\n        // ------\n        if (searchTerm === \"\") {\n            this.grabPatients();\n        } else {\n            let filtered = this.state.patients.filter(function(patient) {\n                let fullName = `${patient.firstName}${patient.lastName}`;\n                if(fullName.toLowerCase().indexOf(searchTerm) === -1) {\n                    return false;\n                }\n                return true;\n            });\n            console.log(filtered);\n            console.log(this.state.patients);\n            console.log(this.state.patients_filtered);\n            this.setState({ patients_filtered: filtered});\n        }\n    }\n\n    // ------ Handles user input tracking of new folder\n    handleNewFolder = event => {\n        let newFolder = event.target.value;\n        console.log(newFolder);\n        this.setState({ newFolder });\n    }\n\n    // ------ Create new folder -> db\n    handleCreateFolder = event => {\n        event.preventDefault();\n\n        let folder = {\n            folderName: this.state.newFolder,\n            patients: []\n        };\n\n        API.createFolder(folder)\n            .then(this.grabFolders())\n            .catch(err => console.log(err.response))\n    }\n\n    // ------ Handle folder onClick filtering\n    folderFilter = event => {\n        event.preventDefault();\n        \n        const folder_id = event.target.key || event.target.id;\n\n        let filtered = this.state.folders.filter(function(folder) {\n            if(folder._id === folder_id) {\n                return true;\n            }\n            return false;\n        })\n        console.log(filtered[0]);\n        console.log(filtered[0].patients);\n        let folderPatients = filtered[0].patients;\n\n        let further_filter = this.state.patients.filter(function(patient) {\n            return folderPatients.indexOf(patient._id) > -1;\n        })\n\n        this.setState({ patients_filtered: further_filter });\n    }\n\n    // ------ Render\n    render() {\n        return (\n            <Container fluid className=\"container\">\n                {/* <Row>\n                    <ButtonToolbar>\n                        <Button variant=\"primary\" onClick={() => this.setState({ modalShow: true })}>\n                            <h5>Create new patient</h5>\n                        </Button>\n\n                        <PatientModel \n                            show={this.state.modalShow}\n                            onHide={() => this.setState({ modalShow: false })}\n                            handleNewPatientFirst={this.handleNewPatientFirst}\n                            handleNewPatientLast={this.handleNewPatientLast}\n                            handleSave={this.handleSave}\n                        />\n                    </ButtonToolbar>\n                </Row> */}\n                <Row>\n                    <Col size=\"3\">\n                        <FolderComponent \n                            folders={this.state.folders}\n                            handleNewFolder={this.handleNewFolder}\n                            handleCreateFolder={this.handleCreateFolder}\n                            folderFilter={this.folderFilter}\n                        />\n                    </Col>\n                    <Col size=\"9\">\n                        <WorklistComponent \n                            patients_filtered={this.state.patients_filtered} \n                            searchTerm={this.state.searchTerm}\n                            handleOnChange={this.handleOnChange}\n                            handleNewPatientFirst={this.handleNewPatientFirst}\n                            handleNewPatientLast={this.handleNewPatientLast}\n                            handleSave={this.handleSave}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n// ------ Export\nexport default Worklist","// ------ Dependencies ------\nimport React from \"react\";\nimport \"./style.css\";\n\n// ------Jumbotron ------\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron text-center\"></div>\n  );\n}\n\n// ------ Export ------\nexport default Jumbotron;\n","// ------ Dependencies ------\n\nimport React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\n\n// ------ 404 Page ------\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1 className=\"text-white\">404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄\n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n\n// ------ Export ------\n\nexport default NoMatch;","// ------ Dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport WorklistPage from \"./pages/Worklist\";\nimport NoMatch from \"./pages/NoMatch\";\n\n// ------ App\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={WorklistPage} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// ------ Export\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}